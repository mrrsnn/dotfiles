# macros

profile() {
  if [[ $1 -eq "" ]]
  then
    vim ~/.zshrc && source ~/.zshrc
  else
    source $@
  fi
}

restart() {
  source ~/.zshrc
}

tt() {
  if [[ $2 -gt 0 ]]
  then
    L=$2
  else
    L=2
  fi
  tree $@ --dirsfirst -F -L $L -I 'node_modules' -I '.next'
}

ls() {
  gls $@ --color -hFA --group-directories-first
}

ll() {
  gls $@ -ghoF --color --time-style=long-iso --group-directories-first 
}

la() {
  ll $@ -a
}

lsizes() {
  gls $@ --color -ghAFS | awk '{printf \"%s\\t%s\n\", \$4, substr(\$0, index(\$0, \$8))}'
}

llpids() {
  ps -u $(whoami) -m -f | grep -e "$1" | grep -v "grep" | awk '{print $2}' | tr '\n' '\ '
}

lljson() {
  tree -J $1 | jq $2 '.'
}

jscripts() {
  cat package.json | jq -s ".[0].scripts"
}

vgif() {
  ffmpeg -ss 0:00 -i $1 -t 4 -vf fps=20,scale=-1:360 $2
}

ff () {
  find $1 -not -path '**/.**' -not -path '**node_modules**' 
}

ffa () {
  find $1 -not -path '**node_modules**' 
}

goto() {
  destination=`find ~/dev -not -path "**/\.**" -not -path "**target**" -not -path "**build**" -not -path "**dist**" -not -path "**node_modules**" | fzf`
  cd $destination
}

uriEncode() {
    uriEncoded=""
    for term in $@; do
        uriEncoded="$uriEncoded%20$term"
    done
    echo "$uriEncoded"
}

ggl() {
    search=$(uriEncode $@)
    open "https://www.google.com/search?q=$search"
}

yt() {
    search=$(uriEncode $@)
    open "https://www.youtube.com/results?search_query=$search"
}

tweet() {
  search=$(uriEncode $@)
  open "https://twitter.com/intent/tweet?text=$search"
}

tu() {
  tmux resize-pane -U $1
}

td() {
  tmux resize-pane -D $1
}

shake-branches() {
  read "REPLY?Have you pushed up all WIP branches to origin? (y/N): ";
  REPLY=${REPLY:-y};
  if [[ "$REPLY" != [yY] ]]; then
    echo "Please push up those branches before pruning and shaking"
    return 1;
  fi
  git checkout -q main &&
    git fetch --prune -q &&
    git remote prune origin &&
    remotes=$(git branch -r --no-color | grep -v HEAD | sed 's/  origin\///g' | sort) &&
    locals=$(git branch --no-color | grep -v main | tr -d ' ' | sort) &&
    dangling=($(comm -2 -3 <(echo $locals) <(echo $remotes))) &&
    if [[ "${#dangling[@]}" != "0" ]]  then git branch -D $dangling; fi
}
